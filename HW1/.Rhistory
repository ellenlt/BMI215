typeof(svmTestPredictions)
typeof(dfNewX[,1])
View(dfNewX)
dfNewX[,1]
typeof(dfNewX[,1])
typeof(dfNewX[,2])
typeof(newX[,1])
typeof(dfX[,1])
newX[,1]
typeof(newX[,1])
table(svmTestPredictions, newX[,1])
class(dfNewX[,1])
class(as.vector(dfNewX[,1]))
table(svmTestPredictions, as.vector(dfNewX[,1]))
class(dfNewX[,1])
class(as.vector(dfNewX[,1]))
dfNewX[,1]
class(svmTestPredictions)
class(dfNewX[,1])
levels(dfNewX[,1])
as.list(dfNewX[,1])
as.list(levels(dfNewX[,1]))
table(svmTestPredictions, as.vector(dfNewX[,1]), stringsAsFactors=F)
table(svmTestPredictions, as.vector(dfNewX[,1]), stringsAsFactors=T)
table(svmTestPredictions, as.list(dfNewX[,1]))
as.list(dfNewX[,1])
unlist(dfNewX[,1])
class(unlist(dfNewX[,1]))
list(dfNewX[,1])
class(list(dfNewX[,1]))
table(svmTestPredictions, list(dfNewX[,1]))
list <- class(list(dfNewX[,1]))
table(svmTestPredictions, list)
list <- class(list(dfNewX[,1]))
list <- list(dfNewX[,1])
table(svmTestPredictions, list)
list
class(list)
class(svmTestPredictions)
svmTestPredictions
table(svmTestPredictions, list)
class(dfNewX[[,1]])
class(dfNewX[[1]])
dfNewX[1]
dfNewX
View(dfNewX)
dfNewX[1]
dfNewX[[1]]
class(dfNewX[[1]])
table(svmTestPredictions, dfNewX[[1]])
test <- dfNewX[[1]]
test
class(test)
test <- newX[[1]]
class(test)
table(svmTestPredictions, newX[[1]])
svmTestPredictions
class(svmTestPredictions)
testData$Obesity
class(testData$Obesity)
table(svmTestPredictions, testData$Obesity)
table(is.vector(svmTestPredictions), testData$Obesity)
length(svmTestPredictions)
svmTestPredictions
svmTP <- is.vector(svmTestPredictions)
svmTP <- vector(svmTestPredictions)
length(svmTP)
class(svmTestPredictions)
svmTestPredictions[1]
sum(svmTestPredictions=="Y")
svmTestPredictions <- predict(svmModel, dfNewX[,2:length(dfNewX)], decisionValues=T)
svmTestPredictions
svmTestPredictions <- predict(svmModel, dfNewX[,2:length(dfNewX)])
svmTestPredictions
table(svmTestPredictions,testData$Obesity)
svmTestPredictions <- predict(svmModel, dfNewX[,2:length(dfNewX)], decisionValues=T)
table(svmTestPredictions,testData$Obesity)
svmModel <- LiblineaR(dfX[,2:length(dfX)], y, type=1)
svmTrainingPredictions <- predict(svmModel, dfX[,2:length(dfX)])
svmTrainingPredictions
y <- trainingData[,diseaseName]
y[y=="Y"] <- 1
y[y=="N"] <- 0
class(y)<- "numeric"
y <- data.frame(y)
# Create vector y with answers
testy <- testData[,diseaseName]
testy[testy=="Y"] <- 1
testy[testy=="N"] <- 0
class(testy)<- "numeric"
testy <- data.frame(testy)
svmModel <- LiblineaR(dfX[,2:length(dfX)], y, type=1)
View(y)
svmModel <- LiblineaR(dfX[,2:length(dfX)], y, type=1)
y <- trainingData[,diseaseName]
y[y=="Y"] <- 1
y[y=="N"] <- 0
#class(y)<- "numeric"
svmModel <- LiblineaR(dfX[,2:length(dfX)], y, type=1)
testy <- testData[,diseaseName]
testy[testy=="Y"] <- 1
testy[testy=="N"] <- 0
svmTrainingPredictions <- predict(svmModel, dfX[,2:length(dfX)])
svmTrainingPredictions
table(svmTestPredictions,y)
table(svmTrainingPredictions,y)
class(svmTrainingPredictions)
svmModel <- LiblineaR(dfX[,2:length(dfX)], dfX[,1], type=1)
svmTrainingPredictions <- predict(svmModel, dfX[,2:length(dfX)])
svmTrainingPredictions
names(svmTrainingPredictions)
table(svmTestPredictions$predictions,testData$Obesity)
svmTrainingPredictions <- table(svmTrainingPredictions$predictions,trainingData$Obesity)
svmTestPredictions <- predict(svmModel, dfNewX[,2:length(dfNewX)])
svmTestPredictions <- table(svmTestPredictions$predictions,testData$Obesity)
svmTrainingPredictions
svmTestingPredictions
svmTestPredictions
svmModel <- LiblineaR(dfX[,2:length(dfX)], dfX[,1], type=1)
svmModel
rfModel <- randomForest(dfX[,2:length(dfX)], dfX[,1], ntree=500, do.trace=T)
rfTrainingPredictions <- predict(rfModel)
names(rfTrainingPredictions)
names(rfTrainingPredictions)
rfTrainingPredictions
class(rfTrainingPredictions)
table(rfTestPredictions,testData$Obesity)
table(rfTrainingPredictions,testData$Obesity)
length(rfTrainingPredictions)
length(testData$Obesity)
table(rfTrainingPredictions,trainingData$Obesity)
rfTestingPredictions <- predict(rfModel, dfNewX[,2:length(dfX)])
table(rfTrainingPredictions,trainingData$Obesity)
table(rfTestingPredictions,testData$Obesity)
rfModel <- randomForest(dfX[,2:length(dfX)], dfX[,1], ntree=500, do.trace=T)
table(rfTrainingPredictions,trainingData$Obesity)
table(rfTestingPredictions,testData$Obesity)
rfImportantFeatures <- rfModel$importance
rfModel$importance
svmModel
summary(svmModel)
glmModel <- glm(formula = Obesity ~ obese + obesity + morbid + sleep + apnea + albuterol + obstructive + wheezing + chronic + complications + morbidly + allergy + bowel + study, data = dfX, family="binomial")
glmTrainingPredictions <- predict(glmModel, se.fit=T)
glmTrainingError <- mae(glmTrainingPredictions$se.fit)
names(glmTrainingError)
name(glmTrainingError)
summary(glmTrainingError)
glmTrainingError
glmTrainingPredictions <- predict(glmModel, se.fit=T)
names(glmTrainingPredictions)
glmTrainingPredictions$fit
length(glmTrainingPredictions)
length(glmTrainingPredictions$fit)
glmTrainingPredictions$fit[glmTrainingPredictions$fit<0] <- "N"
glmTrainingPredictions$fit[glmTrainingPredictions$fit>0] <- "Y"
glmTrainingPredictions$fit
table(glmTrainingPredictions$fit, trainingData$Obesity)
glmTrainingPredictions <- predict(glmModel, se.fit=T)
glmTrainingPredictions$fit
glmTrainingPredictions$fit[1]
typeof(glmTrainingPredictions$fit[1])
glmTrainingPredictions$fit[1]>0
glmTrainingPredictions$fit[glmTrainingPredictions$fit<0==T] <- "N"
glmTrainingPredictions$fit[glmTrainingPredictions$fit>0==T] <- "Y"
glmTrainingPredictions$fit[glmTrainingPredictions$fit < 0] <- "N"
glmTrainingPredictions$fit
glmTrainingPredictions$fit[glmTrainingPredictions$fit > 0] <- "Y"
glmTrainingPredictions$fit
glmTrainingPredictions <- predict(glmModel, se.fit=T)
glmTrainingPredictions$fit
glmTrainingPredictions$fit[glmTrainingPredictions$fit < 0] <- "N"
glmTrainingPredictions$fit
glmTrainingPredictions$fit[1]
glmTrainingPredictions$fit[2]
glmTrainingPredictions$fit[3]
glmTrainingPredictions$fit[4]
glmTrainingPredictions$fit[20]
glmTrainingPredictions$fit[603]
typeof(glmTrainingPredictions$fit[1])
glmTrainingPredictions$fit[1]>0
glmTrainingPredictions$fit[glmTrainingPredictionsRaw$fit > 0 && 1==1] <- "Y"
glmTrainingPredictions$fit[glmTrainingPredictions$fit > 0 && 1==1] <- "Y"
glmTrainingPredictions <- predict(glmModel, se.fit=T)
glmTrainingPredictions
glmTrainingPredictions$fit
glmTrainingPredictions[glmTrainingPredictions$fit < 0] <- "N"
glmTrainingPredictions$fit
glmTrainingPredictions$fit
glmTrainingPredictions <- predict(glmModel, se.fit=T)
glmTrainingPredictions$fit
glmTrainingPredictions$fit[glmTrainingPredictions$fit < 0] <- "N"
glmTrainingPredictions$fit
glmTrainingPredictions$fit[glmTrainingPredictions$fit > 0 && is.numeric(glmTrainingPredictions$fit)] <- "Y"
glmTrainingPredictions$fit
is.numeric(glmTrainingPredictions$fit[1])
glmTrainingPredictions$fit[1]
is.numeric(glmTrainingPredictions$fit[603])
glmTrainingPredictions$fit[603]
glmTrainingPredictions$fit[glmTrainingPredictions$fit > 0 && glmTrainingPredictions$fit != "N"] <- "Y"
glmTrainingPredictions$fit
glmTrainingPredictions$fit[glmTrainingPredictions$fit != "N"] <- "Y"
glmTrainingPredictions$fit
table(glmTrainingPredictions$fit, trainingData$Obesity)
glmTestingPredictions <- predict(glmModel, newdata = dfNewX, se.fit=T)
glmTestingPredictions$fit[glmTestingPredictions$fit < 0] <- "N"
glmTestingPredictions$fit[glmTestingPredictions$fit != "N"] <- "Y"
table(glmTestingPredictions$fit, testData$Obesity)
glmModel <- glm(formula = Obesity ~ obese + obesity + morbid + sleep + apnea + albuterol + obstructive + wheezing + chronic + complications + morbidly + allergy + bowel + study, data = dfX, family="binomial")
summary(glmModel)
# Training error
glmTrainingPredictions <- predict(glmModel, se.fit=T)
# Convert to Y/N
glmTrainingPredictions$fit[glmTrainingPredictions$fit < 0] <- "N"
glmTrainingPredictions$fit[glmTrainingPredictions$fit != "N"] <- "Y"
table(glmTrainingPredictions$fit, trainingData$Obesity)
# Test error
glmTestingPredictions <- predict(glmModel, newdata = dfNewX, se.fit=T)
glmTestingPredictions$fit[glmTestingPredictions$fit < 0] <- "N"
glmTestingPredictions$fit[glmTestingPredictions$fit != "N"] <- "Y"
table(glmTestingPredictions$fit, testData$Obesity)
svmModel <- LiblineaR(dfX[,2:length(dfX)], dfX[,1], type=1)
summary(svmModel)
svmTrainingPredictions <- predict(svmModel, dfX[,2:length(dfX)])
svmTrainingPredictions <- table(svmTrainingPredictions$predictions,trainingData$Obesity)
svmTestPredictions <- predict(svmModel, dfNewX[,2:length(dfNewX)])
svmTestPredictions <- table(svmTestPredictions$predictions,testData$Obesity)
svmTrainingPredictions
svmTestPredictions
sampleCondProbs <- sampleCounts
sampleCondProbs[,diseaseName] <- NULL
sampleCondProbs[1,] <- log((sampleCondProbs[1,]+1)/(sampleWordsPerClass[1]+length(sampleCondProbs[1,]))) + log(sampleProbNoDisease)
sample <- trainingDataFrame[1:20,1:20]
sampleCounts <- generateCounts(diseaseName, sample)
sampleProbs <- generateCondProbs(sampleCounts, sample)
trainingDataFrame <- csvToDf(trainingData, diseaseName)
csvToDf <- function(data, diseaseName) {
words <- data.frame(matrix(unlist(data[1:wordsInVocab]), nrow=length(data[,1]), byrow=F),stringsAsFactors=F)
names(words) <- names(data[1:wordsInVocab])
words$ID <- 1:nrow(words)
disease <- data.frame(unlist(data[,diseaseName]),stringsAsFactors=F)
names(disease) <- diseaseName
disease$ID <- 1:nrow(disease)
dataTable <- merge(disease,words,by="ID")
dataTable$ID <- NULL
dataTable
}
trainingDataFrame <- csvToDf(trainingData, diseaseName)
sample <- trainingDataFrame[1:20,1:20]
sampleCounts <- generateCounts(diseaseName, sample)
sampleProbs <- generateCondProbs(sampleCounts, sample)
generateCondProbs <- function(counts, data) {
wordsPerClass <- rowSums(counts[2:length(counts)])
probDisease <- sum(data[,1]=="Y")/length(data[,1])
probNoDisease <- sum(data[,1]=="N")/length(data[,1])
condProbs <- counts
condProbs[,diseaseName] <- NULL
condProbs[1,] <- log((condProbs[1,]+1)/(wordsPerClass[1]+length(condProbs[,1]))) + log(probNoDisease)
condProbs[2,] <- log((condProbs[2,]+1)/(wordsPerClass[2]+length(condProbs[,1]))) + log(probDisease)
condProbs
}
generateCounts <- function(disease, data) {
# Count when word appears (w=1)
counts1 <- ddply(data,disease,colwise(sum))
}
sample <- trainingDataFrame[1:20,1:20]
sampleCounts <- generateCounts(diseaseName, sample)
sampleProbs <- generateCondProbs(sampleCounts, sample)
View(sampleProbs)
evaluateModel <- function(predictions, answers) {
result <- table(predictions, answers)
}
# useModel
# Input: Model of log conditional probabilities (Data frame where 1st and 2nd rows contain log(P(w|D)P(D))
#       for disease D = No and D = Yes, respectively. One column per word w.)
#       Disease string name, and
#       data as data frame
# Output: A vector of predictions of whether each document is associated with given disease
useModel <- function(disease, data, model) {
data[,disease] <- NULL
result <- c(rep(0,length(data[,1])))
for(i in 1:length(data[,1])) {
logProbDisease <- 0
logProbNoDisease <- 0
for(w in 1:wordsInVocab) {
if(data[i,w]==1) {
logProbNoDisease <- logProbDisease + model[1,w]
logProbDisease <- logProbDisease + model[2,w]
}
}
if(logProbDisease > logProbNoDisease) {
result[i] = "Y"
} else {
result[i] = "N"
}
}
result
}
#trainModel
# Input: Data frame containing vectors for each word and disease of interest
#         Disease of interest, as a string
# Output: Data frame where 1st and 2nd rows contain log(P(w|D)P(D))
#         for disease D = No and D = Yes, respectively. One column per word w.
trainModel <- function(disease, data) {
counts <- generateCounts(disease, data)
model <- generateCondProbs(counts, data)
model
}
# csvToDf
# Input: Data as a list
# Output: Data frame containing columns for all the words as well as the disease of interest.
# Returned data frame doesn't include columns for other diseases
csvToDf <- function(data, diseaseName) {
words <- data.frame(matrix(unlist(data[1:wordsInVocab]), nrow=length(data[,1]), byrow=F),stringsAsFactors=F)
names(words) <- names(data[1:wordsInVocab])
words$ID <- 1:nrow(words)
disease <- data.frame(unlist(data[,diseaseName]),stringsAsFactors=F)
names(disease) <- diseaseName
disease$ID <- 1:nrow(disease)
dataTable <- merge(disease,words,by="ID")
dataTable$ID <- NULL
dataTable
}
# generateCounts
# Input: Disease name (as a string), data (in a dataframe)
# Output: Data frame where 1st and 2nd rows are how many times each word appears
# when disease = N and Y, respectively. 3rd and 4th rows are how many times each word
# does not appear when disease = N and Y, respectively.
generateCounts <- function(disease, data) {
# Count when word appears (w=1)
counts1 <- ddply(data,disease,colwise(sum))
}
# generateCondProbs
# Input: Data for a given disease and all words, in correctly processed data frame
# Output: Data frame where 1st and 2nd rows contain log(P(w=1|D)P(D))
# for disease D = No and Yes, respectively, and the 3rd and 4th rows contain
# log(P(w=0|D)P(D)) for D = No and Yes, respectively. One column per word w.
generateCondProbs <- function(counts, data) {
wordsPerClass <- rowSums(counts[2:length(counts)])
probDisease <- sum(data[,1]=="Y")/length(data[,1])
probNoDisease <- sum(data[,1]=="N")/length(data[,1])
condProbs <- counts
condProbs[,diseaseName] <- NULL
condProbs[1,] <- log((condProbs[1,]+1)/(wordsPerClass[1]+length(condProbs[,1]))) + log(probNoDisease)
condProbs[2,] <- log((condProbs[2,]+1)/(wordsPerClass[2]+length(condProbs[,1]))) + log(probDisease)
condProbs
}
#sample <- trainingDataFrame[1:20,1:20]
#sampleCounts <- generateCounts(diseaseName, sample)
#sampleProbs <- generateCondProbs(sampleCounts, sample)
zero <- function(x) sum(x == 0)
setwd("/Users/ellen/BMI215/HW1")
getwd()
library(plyr)
trainingData <- read.csv("./training.csv", header=TRUE, as.is=TRUE)
testData <- read.csv("./test.csv", header=TRUE, as.is=TRUE)
diseaseName <- "Obesity"
wordsInVocab <<- 10582
trainingDataFrame <- csvToDf(trainingData, diseaseName)
model <- trainModel(diseaseName, trainingDataFrame)
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[1:10,], model)
trainingDataAnswers <- trainingDataFrame[1:10,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[1:50,], model)
trainingDataAnswers <- trainingDataFrame[1:50,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
useModel <- function(disease, data, model) {
data[,disease] <- NULL
result <- c(rep(0,length(data[,1])))
for(i in 1:length(data[,1])) {
logProbDisease <- 0
logProbNoDisease <- 0
for(w in 1:wordsInVocab) {
if(data[i,w]==1) {
logProbNoDisease <- logProbNoDisease + model[1,w]
logProbDisease <- logProbDisease + model[2,w]
}
}
if(logProbDisease > logProbNoDisease) {
result[i] = "Y"
} else {
result[i] = "N"
}
}
result
}
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[1:20,], model)
trainingDataAnswers <- trainingDataFrame[1:20,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
trainingDataPredictions
debugSource('~/BMI215/HW1/naivebayesclassifier.R')
View(data)
View(data)
View(data)
View(model)
counts <- generateCounts(diseaseName, trainingDataFrame)
View(counts)
trainingDataFrame[1,10]==1
trainingDataFrame[1,10]==11
trainingDataFrame[1,11]==1
trainingDataFrame[1,1]
View(trainingData)
View(trainingDataFrame)
class(trainingData)
class(trainingDataFrame)
View(trainingDataFrame)
trainingDataPredictions <- useModel(diseaseName, trainingData[1:10,2:length(trainingDataFrame)], model)
trainingDataPredictions <- useModel(diseaseName, trainingData[1:10,2:length(trainingDataFrame)], model)
source('~/.active-rstudio-document')
View(trainingData)
View(trainingDataFrame)
trainingError
View(trainingDataFrame)
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[1:10,2:length(trainingDataFrame)], model)
trainingDataAnswers <- trainingDataFrame[1:10,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
trainingDataPredictions
trainingDataFrame[1:10,2:length(trainingDataFrame)]
trainingDataFrame[1,2]
trainingDataFrame[1,1]
trainingDataFrame[1,1]==1
trainingDataFrame[1,1]==2
generateCondProbs <- function(counts, data) {
wordsPerClass <- rowSums(counts[2:length(counts)])
probDisease <- sum(data[,1]=="Y")/length(data[,1])
probNoDisease <- sum(data[,1]=="N")/length(data[,1])
condProbs <- counts
condProbs[,diseaseName] <- NULL
condProbs[1,] <- log10((condProbs[1,]+1)/(wordsPerClass[1]+length(condProbs[,1]))) + log10(probNoDisease)
condProbs[2,] <- log10((condProbs[2,]+1)/(wordsPerClass[2]+length(condProbs[,1]))) + log10(probDisease)
condProbs
}
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[1:10,2:length(trainingDataFrame)], model)
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
LaPlace <<- FALSE
generateCondProbs <- function(counts, data) {
wordsPerClass <- rowSums(counts[2:length(counts)])
probDisease <- sum(data[,1]=="Y")/length(data[,1])
probNoDisease <- sum(data[,1]=="N")/length(data[,1])
condProbs <- counts
condProbs[,diseaseName] <- NULL
if(LaPlace==TRUE) {
condProbs[1,] <- log10((condProbs[1,]+1)/(wordsPerClass[1]+length(condProbs[,1]))) + log10(probNoDisease)
condProbs[2,] <- log10((condProbs[2,]+1)/(wordsPerClass[2]+length(condProbs[,1]))) + log10(probDisease)
} else {
condProbs[1,] <- log10((condProbs[1,])/(wordsPerClass[1])) + log10(probNoDisease)
condProbs[2,] <- log10((condProbs[2,])/(wordsPerClass[2])) + log10(probDisease)
}
condProbs
}
model <- trainModel(diseaseName, trainingDataFrame)
View(model)
View(model)
model$abilify
model[1, "abilify"]
is.numeric(model[1, "abilify"])
is.Inf(model[1, "abilify"])
is.inf(model[1, "abilify"])
is.NaN(model[1, "abilify"])
model[1, "abilify"] == "Inf"
model[1, "abilify"] == "-Inf"
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[1:10,2:length(trainingDataFrame)], model)
trainingDataAnswers <- trainingDataFrame[1:10 ,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[,2:length(trainingDataFrame)], model)
length(condProbs[,1])
length(counts[,1])
sampleCounts <- generateCounts(diseaseName, sample)
length(sampleCounts[,1])
sampleCounts <- generateCounts(diseaseName, sample)
LaPlace <<- FALSE
sampleCounts <- generateCounts(diseaseName, sample)
sample <- trainingDataFrame[1:20,1:20]
sampleCounts <- generateCounts(diseaseName, sample)
length(sampleCounts[,1])
generateCondProbs <- function(counts, data) {
wordsPerClass <- rowSums(counts[2:length(counts)])
probDisease <- sum(data[,1]=="Y")/length(data[,1])
probNoDisease <- sum(data[,1]=="N")/length(data[,1])
condProbs <- counts
condProbs[,diseaseName] <- NULL
if(LaPlace==TRUE) {
condProbs[1,] <- log10((condProbs[1,]+1)/(wordsPerClass[1]+length(condProbs[1,]))) + log10(probNoDisease)
condProbs[2,] <- log10((condProbs[2,]+1)/(wordsPerClass[2]+length(condProbs[1,]))) + log10(probDisease)
} else {
condProbs[1,] <- log10((condProbs[1,])/(wordsPerClass[1])) + log10(probNoDisease)
condProbs[2,] <- log10((condProbs[2,])/(wordsPerClass[2])) + log10(probDisease)
}
condProbs
}
LaPlace <<- T
trainingDataFrame <- csvToDf(trainingData, diseaseName)
model <- trainModel(diseaseName, trainingDataFrame)
trainingDataAnswers <- trainingDataFrame[,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[,2:length(trainingDataFrame)], model)
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[1:10,2:length(trainingDataFrame)], model)
View(model)
View(model)
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingDataAnswers <- trainingDataFrame[1:10,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
LaPlace <<- F
trainingDataFrame <- csvToDf(trainingData, diseaseName)
model <- trainModel(diseaseName, trainingDataFrame)
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[,2:length(trainingDataFrame)], model)
