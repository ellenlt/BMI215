require(class)
require(ROCR)
require(e1071)
require(FSelector)
require(foreign)
require(arules)
require(class)
install.packages("ROCR")
install.packages("e1071")
install.packages("FSelector")
install.packages("foreign")
require(class)
require(ROCR)
require(e1071)
require(FSelector)
require(foreign)
install.packages("arules")
require(arules)
leukemia <-read.table("http://bmi214.stanford.edu/files/a2/leukemia.csv",header=TRUE,sep=",")
summary(leukemia)
leukemia[,c("leukemia_type")]
names(leukemia)
knn.pred <- knn.cv(k=5,
cl=leukemia[,c("leukemia_type")],
train=leukemia[,names(leukemia)!="leukemia_type"],
prob=TRUE)
## Generate the confusion matrix for the classifier:
confusion.table <- table(knn.pred, leukemia[,c("leukemia_type")])
confusion.table
knn.actual <- leukemia[,c("leukemia_type")]
confusion.table <- table(knn.pred, actual)
confusion.table <- table(knn.pred, knn.actual)
confusion.table
knn.prob <- attr(knn.pred,"prob")
knn.prob[knn.pred == "AML"] = 1 - knn.prob[knn.pred == "AML"]
knn.rocr.pred <- prediction(knn.prob,
leukemia[,c("leukemia_type")],
label.ordering=c("AML","ALL"))
knn.perf <- performance(knn.rocr.pred,"tpr","fpr")
plot(knn.perf)
cross.validation <- function(data, response, FUN, num.folds=5) {
fold.size = floor(nrow(data)/num.folds)
## Loop for each fold:
for (i in 1:num.folds) {
## Determine the indexes for test and train partitions:
start.index <- (i-1)*fold.size + 1
if(i == num.folds) end.index <- nrow(data) else end.index <-
start.index +
fold.size - 1
excl.index <- c(start.index:end.index)
test <- data[excl.index,]
train <- data[-excl.index,]
## Test:
if (i==1) {
weights <- FUN(as.formula(paste(response,'~.',sep='')),test)
} else {
weights[,1] <- weights[,1] +
FUN(as.formula(paste(response,'~.',sep='')),test)[,1]
}
}
weights[,1] <- weights[,1]/num.folds
return(weights[order(weights[,1], decreasing=TRUE),,drop=FALSE])
}
## zeroR returns a data frame, where the rows represent:
## TP, TN, FP, FN
classOne<-"1"
classTwo<-"2"
zeroR <- function(formula, data) {
class.summary <- summary(data[,c("leukemia_type")])
classes <- labels(class.summary)
if ( class.summary[as.numeric(classOne)] > class.summary[as.numeric(classTwo)] ) {
other.class <- classes[as.numeric(classTwo)]
predictions <- rep(classes[as.numeric(classOne)],times=nrow(data))
} else {
other.class <- classes[as.numeric(classOne)]
predictions <- rep(classes[as.numeric(classTwo)],times=nrow(data))
}
confusion.table <- table(predictions, data[,c("leukemia_type")])
results <- matrix(nrow=4,data=0)
results[1,] <- confusion.table[c(predictions[as.numeric(classOne)]),c(predictions[as.numeric(classOne)])]
results[3,] <- confusion.table[c(predictions[as.numeric(classOne)]),other.class]
results.frame <- data.frame(results,row.names=c("TP","TN","FP","FN"))
return(results.frame)
}
cross.validation(leukemia,"",zeroR)
View(leukemia)
leukemia[,c("leukemia_type")]
summary(leukemia[,c("leukemia_type")])
labels(summary(leukemia[,c("leukemia_type")]))
labels(summary(leukemia[,c("leukemia_type")]))[1]
cross.validation(leukemia,"",zeroR)
## zeroR returns a data frame, where the rows represent:
## TP, TN, FP, FN
classOne<-"1"  #ALL
classTwo<-"2"  #AML
zeroR <- function(formula, data) {
class.summary <- summary(data[,c("leukemia_type")])
classes <- labels(class.summary)
if ( class.summary[as.numeric(classOne)] > class.summary[as.numeric(classTwo)] ) {
other.class <- classes[as.numeric(classTwo)]
predictions <- rep(classes[as.numeric(classOne)],times=nrow(data))
} else {
other.class <- classes[as.numeric(classOne)]
predictions <- rep(classes[as.numeric(classTwo)],times=nrow(data))
}
confusion.table <<- table(predictions, data[,c("leukemia_type")])
results <- matrix(nrow=4,data=0)
results[1,] <- confusion.table[c(predictions[as.numeric(classOne)]),c(predictions[as.numeric(classOne)])]
results[3,] <- confusion.table[c(predictions[as.numeric(classOne)]),other.class]
results.frame <- data.frame(results,row.names=c("TP","TN","FP","FN"))
return(results.frame)
}
cross.validation(leukemia,"",zeroR)
confusion.table
summary(data[,c("leukemia_type")])
summary(leukemia[,c("leukemia_type")])
cross.validation(leukemia,"",zeroR)
leukemia[,c("leukemia_type")])
nb.fit <- naiveBayes(leukemia[,names(leukemia)!="leukemia_type"],
leukemia[,c("leukemia_type")])
table(predict(nb.fit,leukemia[,names(leukemia)!="leukemia_type"]),
leukemia[,c("leukemia_type")])
leukemia.subset <- leukemia[,c(1:5,ncol(leukemia))]
feature.col.index <- names(leukemia.subset) != "leukemia_type"
leukemia.subset.knn.pred <- knn.cv(k=5,
cl=leukemia.subset[,c("leukemia_type")],
train=leukemia.subset[,feature.col.index])
leukemia.subset.confusion.table <- table(leukemia.subset.knn.pred,
leukemia.subset[,c("leukemia_type")])
leukemia.subset.confusion.table
weights <- information.gain("leukemia_type ~.",leukemia)
weights[with(weights, order(-attr_importance)),]
rownames(weights)[with(weights, order(-attr_importance))]
yeast <-
read.table("http://bmi214.stanford.edu/files/a2/yeast.dat.csv",
header=TRUE,sep=",")
summary(yeast)
yeast.clust <- kmeans(yeast[, - ncol(yeast)], 2)
yeast.clust
sum(yeast.clust$cluster==1)
sum(yeast.clust$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust <- kmeans(yeast[, - ncol(yeast)], 2)
yeast.clust
sum(yeast.clust$cluster==1)
sum(yeast.clust$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.1 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.2 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.5 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.20 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.2 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=2)
sum(yeast.clust.2$cluster==1)
sum(yeast.clust.2$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=1)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=2)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=5)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=20)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=100)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=15)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=1)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=2)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=5)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=20)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.clust.15 <- kmeans(yeast[, - ncol(yeast)], 2,nstart=100)
sum(yeast.clust.15$cluster==1)
sum(yeast.clust.15$cluster==2)
yeast.cluster.vs.label <- table(yeast.clust$cluster, yeast[,c("ribosomal")])
yeast.cluster.vs.label
yeast.knn <- knn.cv(k=5,cl=yeast[,c("ribosomal")],train=yeast[,-ncol(yeast)])
yeast.knn.table <- table(yeast.knn,yeast[,c("ribosomal")])
yeast.knn.table
genotenureitis <-read.arff("http://bmi214.stanford.edu/files/a2/genotenureitus1.arff")
View(genotenureitis)
summary(genotenureitis)
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ``irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ``irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ''irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != ``irep'']
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != 'irep']
genotenureitis <-read.arff("http://bmi214.stanford.edu/files/a2/genotenureitus1.arff")
summary(genotenureitis)
genotenureitis.filtered <-genotenureitis[, colnames(genotenureitis) != 'irep']
summary(genotenureitis)
summary(genotenureitis.filtered)
rules <- apriori(genotenureitis.filtered,
parameter=list(supp=0.5,
conf=0.9,
target="rules",
maxlen=4))
summary(rules)
my.subset <- subset(rules,subset=confidence == 1 & support > 0.8)
summary(my.subset)
inspect(my.subset)
inspect<-inspect(my.subset)
cross.validation(genotenureitis.filtered,'gotgrants',gain.ratio)
cross.validation(genotenureitis.filtered,'gotgrants',chi.squared)
# information gain
cross.validation(genotenureitis.filtered,'gotgrants',information.gain)
# symmetrical uncertainty
cross.validation(genotenureitis.filtered,'gotgrants',symmetrical.uncertainty)
cross.validation(genotenureitis.filtered,'pctdrivel',gain.ratio)
cross.validation(genotenureitis.filtered,'pctdrivel',chi.squared)
cross.validation(genotenureitis.filtered,'pctdrivel',information.gain)
cross.validation(genotenureitis.filtered,'pctdrivel',symmetrical.uncertainty)
setwd("/Users/ellen/BMI215/HW1")
getwd()
library(plyr)
source('~/BMI215/HW1/naivebayesclassifier.R')
# evaluateModel
# Input: Vector of predictions and vector of answers
# Output: Error rate
evaluateModel <- function(predictions, answers) {
result <- table(predictions, answers)
}
# useModel
# Input: Model of log conditional probabilities (Data frame where 1st and 2nd rows contain log(P(w|D)P(D))
#       for disease D = No and D = Yes, respectively. One column per word w.)
#       Disease string name, and
#       data as data frame
# Output: A vector of predictions of whether each document is associated with given disease
useModel <- function(disease, data, model) {
data[,disease] <- NULL
result <- c(rep(0,length(data[,1])))
for(i in 1:length(data[,1])) {
logProbDisease <- 0
logProbNoDisease <- 0
for(w in 1:wordsInVocab) {
if(data[i,w]==1) {
logProbNoDisease <- logProbNoDisease + model[1,w]
logProbDisease <- logProbDisease + model[2,w]
}
}
logProbNoDisease <- logProbNoDisease + log10(probNoDisease)
logProbDisease <- logProbDisease + log10(probDisease)
if(logProbDisease > logProbNoDisease) {
result[i] = "Y"
} else {
result[i] = "N"
}
}
result
}
#trainModel
# Input: Data frame containing vectors for each word and disease of interest
#         Disease of interest, as a string
# Output: Data frame where 1st and 2nd rows contain log(P(w|D)P(D))
#         for disease D = No and D = Yes, respectively. One column per word w.
trainModel <- function(disease, data) {
counts <- generateCounts(disease, data)
model <- generateCondProbs(counts, data)
model
}
# csvToDf
# Input: Data as a list
# Output: Data frame containing columns for all the words as well as the disease of interest.
# Returned data frame doesn't include columns for other diseases
csvToDf <- function(data, diseaseName) {
words <- data.frame(matrix(unlist(data[1:wordsInVocab]), nrow=length(data[,1]), byrow=F),stringsAsFactors=F)
names(words) <- names(data[1:wordsInVocab])
words$ID <- 1:nrow(words)
disease <- data.frame(unlist(data[,diseaseName]),stringsAsFactors=F)
names(disease) <- diseaseName
disease$ID <- 1:nrow(disease)
dataTable <- merge(disease,words,by="ID")
dataTable$ID <- NULL
dataTable
}
# generateCounts
# Input: Disease name (as a string), data (in a dataframe)
# Output: Data frame where 1st and 2nd rows are how many times each word appears
# when disease = N and Y, respectively. 3rd and 4th rows are how many times each word
# does not appear when disease = N and Y, respectively.
generateCounts <- function(disease, data) {
# Count when word appears (w=1)
counts1 <- ddply(data,disease,colwise(sum))
}
# generateCondProbs
# Input: Data for a given disease and all words, in correctly processed data frame
# Output: Data frame where 1st and 2nd rows contain log(P(w=1|D)P(D))
# for disease D = No and Yes, respectively, and the 3rd and 4th rows contain
# log(P(w=0|D)P(D)) for D = No and Yes, respectively. One column per word w.
generateCondProbs <- function(counts, data) {
wordsPerClass <- rowSums(counts[2:length(counts)])
probDisease <- sum(data[,1]=="Y")/length(data[,1])
probNoDisease <- sum(data[,1]=="N")/length(data[,1])
condProbs <- counts
condProbs[,diseaseName] <- NULL
if(LaPlace==TRUE) {
condProbs[1,] <- log10((condProbs[1,]+1)/(wordsPerClass[1]+length(condProbs[1,])))
condProbs[2,] <- log10((condProbs[2,]+1)/(wordsPerClass[2]+length(condProbs[1,])))
} else {
condProbs[1,] <- log10((condProbs[1,])/(wordsPerClass[1]))
condProbs[2,] <- log10((condProbs[2,])/(wordsPerClass[2]))
}
condProbs
}
sample <- trainingDataFrame[1:20,1:20]
sampleCounts <- generateCounts(diseaseName, sample)
zero <- function(x) sum(x == 0)
trainingData <- read.csv("./training.csv", header=TRUE, as.is=TRUE)
testData <- read.csv("./test.csv", header=TRUE, as.is=TRUE)
diseaseName <- "Obesity"
wordsInVocab <<- 10582
LaPlace <<- T
trainingDataFrame <- csvToDf(trainingData, diseaseName)
model <- trainModel(diseaseName, trainingDataFrame)
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[,2:length(trainingDataFrame)], model)
trainingDataAnswers <- trainingDataFrame[,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[,2:length(trainingDataFrame)], model)
generateCondProbs <- function(counts, data) {
wordsPerClass <- rowSums(counts[2:length(counts)])
probDisease <<- sum(data[,1]=="Y")/length(data[,1])
probNoDisease <<- sum(data[,1]=="N")/length(data[,1])
condProbs <- counts
condProbs[,diseaseName] <- NULL
if(LaPlace==TRUE) {
condProbs[1,] <- log10((condProbs[1,]+1)/(wordsPerClass[1]+length(condProbs[1,])))
condProbs[2,] <- log10((condProbs[2,]+1)/(wordsPerClass[2]+length(condProbs[1,])))
} else {
condProbs[1,] <- log10((condProbs[1,])/(wordsPerClass[1]))
condProbs[2,] <- log10((condProbs[2,])/(wordsPerClass[2]))
}
condProbs
}
model <- trainModel(diseaseName, trainingDataFrame)
trainingDataPredictions <- useModel(diseaseName, trainingDataFrame[,2:length(trainingDataFrame)], model)
trainingDataAnswers <- trainingDataFrame[,diseaseName]
trainingError <- evaluateModel(trainingDataPredictions, trainingDataAnswers)
trainingError
testDataFrame <- csvToDf(testData, diseaseName)
testDataPredictions <- useModel(diseaseName, testDataFrame, model)
testDataAnswers <- testDataFrame[,diseaseName]
testError <- evaluateModel(testDataPredictions, testDataAnswers)
testError
