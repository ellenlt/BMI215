glmPredictions[1]
glmPredictions[2]
glmPredictions[2]<=0.009
glmPredictions[[2]]
glmPredictions[[2]]>=0.009
glmPredictions <- glmPredictions[glmPredictions[] >= optimalProbThreshold]
names(glmPredictions)
typeof(glmPredictions)
glmPredictions[1]
glmPredictions[1,]
glmPredictions[,1]
glmPredictions[[1]]
unlist(glmPredictions)
unlist(glmPredictions)[1]
glmPredictions[1]
unlist(glmPredictions)[[1]]
glmPredictions
names(glmPredictions)
c(names(glmPredictions))
typeof(names(glmPredictions))
as.integer(names(glmPredictions))
pairDrugData[as.integer(names(glmPredictions)),]
pairDrugData$drug[as.integer(names(glmPredictions))]
pairDrugData[as.integer(names(glmPredictions)),]
glmPredictions
pairDrugData[as.integer(names(glmPredictions)),]$drug
pairDrugData[as.integer(names(glmPredictions)),]
test<-pairDrugData[as.integer(names(glmPredictions)),]
View(test)
glmPredictions
test$drug
test[1713,]
pairDrugData[1713,]
pairDrugData[1,]
pairDrugData[1,1]
pairDrugData[1:10,]
pairDrugData[1710-1713,]
pairDrugData[1710:1713,]
pairDrugData[1710:1713,]
pairDrugData[1:10,]
pairDrugData[1700:1711,]
pairDrugData[1700:1711,]
pairDrugData[1713,]
pairDrugData[c(1713),]
test[1713,]
test<-pairDrugData[as.integer(names(glmPredictions)),]
test
test<-pairDrugData[as.integer(names(glmPredictions)),]
test
length(test)
dim(test)
test[1713,]
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
glmPredictions
optimalProbThreshold <- 0.009
glmPredictions <- glmPredictions[glmPredictions >= optimalProbThreshold]
indices <- as.integer(names(glmPredictions))
indices
typeof(indices) <- as.integer(names(glmPredictions))
typeof(indices)
indices <- data.frame(as.integer(names(glmPredictions)))
View(indices)
View(pairDrugData)
View(enriched_fisher)
View(diminished_fisher)
View(fisher)
View(enriched_fisher)
result <- wilcox.test(cholesterol, notCholesterol, correct=F)
result
cholesterol
result <- wilcox.test(cholesterol, notCholesterol, correct=T)
mannWhitney <- rbind(mannWhitney, c(result$p.value, median(cholesterol), median(notCholesterol)))
for(i in 1:length(filteredAEs)){
result <- wilcox.test(cholesterol, notCholesterol, correct=T)
mannWhitney <- rbind(mannWhitney, c(result$p.value, median(cholesterol), median(notCholesterol)))
}
for(i in 1:length(filteredAEs)){
cholesterol <- subset(aeFreqs, event %in% filteredAEs[i] & drug %in% cholDrugs)$freq
notCholesterol <- subset(aeFreqs, event %in% filteredAEs[i] & !drug %in% cholDrugs)$freq
result <- wilcox.test(cholesterol, notCholesterol, correct=T)
mannWhitney <- rbind(mannWhitney, c(result$p.value, median(cholesterol), median(notCholesterol)))
}
names(mannWhitney) = c("pVal","medianOccurrenceInCholDrugs","medianOccurrenceInNonCholDrugs")
mannWhitney <- mannWhitney[order(mannWhitney$pVal),]
enriched_mannWhitney <- mannWhitney[mannWhitney$medianOccurrenceInCholDrugs > mannWhitney$medianOccurrenceInNonCholDrugs,][1:10,]
enriched_mannWhitney$event <- filteredAEs[strtoi(row.names(enriched_mannWhitney))]
diminished_mannWhitney <- mannWhitney[mannWhitney$medianOccurrenceInCholDrugs < mannWhitney$medianOccurrenceInNonCholDrugs,][1:10,]
diminished_mannWhitney$event <- filteredAEs[strtoi(row.names(diminished_mannWhitney))]
View(enriched_mannWhitney)
View(diminished_mannWhitney)
aeFreqs <- read.csv("./single_drug_event_frequencies.csv", header=T, as.is=TRUE)
names(aeFreqs) <- c("drug", "event", "freq")
# List/vector of cholesterol drug names (strings)
cholDrugs <- scan("./cholesterol_drugs.txt", what="ch", sep="\n")
cholAEs <- unique(aeFreqs$event[aeFreqs$drug %in% cholDrugs])
cholAECounts <- count(aeFreqs$event[aeFreqs$drug %in% cholDrugs])
names(cholAECounts) <- c("event", "numdrugs")
# String of AEs that co-occur with at least 5 different cholesterol drugs
commonCholAEs <- cholAECounts$event[cholAECounts$numdrugs>=5]
commonCholAEs
nonCholAECounts <- count(aeFreqs$event[!aeFreqs$drug %in% cholDrugs])
names(nonCholAECounts) <- c("event", "numdrugs")
# String of AEs that co-occur with at least 5 different non-cholesterol drugs
commonNonCholAEs <- nonCholAECounts$event[nonCholAECounts$numdrugs>=5]
commonNonCholAEs
filteredAEs <- intersect(commonCholAEs, commonNonCholAEs)
filteredAEs
mannWhitney<-data.frame()
for(i in 1:length(filteredAEs)){
cholesterol <- subset(aeFreqs, event %in% filteredAEs[i] & drug %in% cholDrugs)$freq
notCholesterol <- subset(aeFreqs, event %in% filteredAEs[i] & !drug %in% cholDrugs)$freq
result <- wilcox.test(cholesterol, notCholesterol, correct=T)
mannWhitney <- rbind(mannWhitney, c(result$p.value, median(cholesterol), median(notCholesterol)))
}
names(mannWhitney) = c("pVal","medianOccurrenceInCholDrugs","medianOccurrenceInNonCholDrugs")
mannWhitney <- mannWhitney[order(mannWhitney$pVal),]
enriched_mannWhitney <- mannWhitney[mannWhitney$medianOccurrenceInCholDrugs > mannWhitney$medianOccurrenceInNonCholDrugs,][1:10,]
enriched_mannWhitney$event <- filteredAEs[strtoi(row.names(enriched_mannWhitney))]
diminished_mannWhitney <- mannWhitney[mannWhitney$medianOccurrenceInCholDrugs < mannWhitney$medianOccurrenceInNonCholDrugs,][1:10,]
diminished_mannWhitney$event <- filteredAEs[strtoi(row.names(diminished_mannWhitney))]
View(enriched_mannWhitney)
View(diminished_mannWhitney)
tTest<-data.frame()
for(i in 1:length(filteredAEs)){
cholesterol <- subset(aeFreqs, event %in% filteredAEs[i] & drug %in% cholDrugs)$freq
notCholesterol <- subset(aeFreqs, event %in% filteredAEs[i] & !drug %in% cholDrugs)$freq
result <- t.test(cholesterol, notCholesterol)
tTest <- rbind(tTest, c(result$p.value, result$estimate[1], result$estimate[2]))
}
names(tTest) = c("pVal","meanOccurrenceInCholDrugs","meanOccurrenceInNonCholDrugs")
tTest <- tTest[order(tTest$pVal),]
enriched_tTest <- tTest[tTest$meanOccurrenceInCholDrugs > tTest$meanOccurrenceInNonCholDrugs,][1:10,]
enriched_tTest$event <- filteredAEs[strtoi(row.names(enriched_tTest))]
diminished_tTest <- tTest[tTest$meanOccurrenceInCholDrugs < tTest$meanOccurrenceInNonCholDrugs,][1:10,]
diminished_tTest$event <- filteredAEs[strtoi(row.names(diminished_tTest))]
View(diminished_tTest)
View(enriched_tTest)
top30enriched_mannWhitney <- mannWhitney[mannWhitney$medianOccurrenceInCholDrugs > mannWhitney$medianOccurrenceInNonCholDrugs,][1:30,]
top30enrichedAEs <- filteredAEs[strtoi(row.names(top30enriched_mannWhitney))]
for(i in 1:length(top30enrichedAEs)){
print(top30enrichedAEs[i])
}
test<-pairDrugData$drug[pairDrugData$row.names]
test
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
optimalProbThreshold <- 0.009
glmPredictions <- glmPredictions[glmPredictions >= optimalProbThreshold]
indices <- data.frame(as.integer(names(glmPredictions)))
indices <- as.integer(names(glmPredictions))
indices
indices[1]
indices[2]
indices[1:10]
names(pairDrugData)
test<-pairDrugData[which(pairDrugData$ID %in% indices),]
View(test)
test[1713,]
test[1710:1713,]
View(test)
View(pairDrugData)
pairDrugAeFreqs <- read.csv("./pair_drug_event_frequencies.csv", header=T, as.is=TRUE)
names(pairDrugAeFreqs) <- c("drug","drug1","drug2","event","freq")
Y <- data.frame(drug=unique(pairDrugAeFreqs$drug)) # Dataframe column of all possible drugs
pairDrugData <- sampleFeatureFormat(pairDrugAeFreqs, top5AEsByFisher, Y, c())
# Number of unique drug pairs in the dataset
nrow(pairDrugData)
# Filter out all non-cholesterol drugs
pairDrugData <- cbind(ID=rownames(pairDrugData),pairDrugData) # Split drug pair into separate columns with name of each drug
pairDrugData <- cbind(pairDrugData, data.frame(do.call('rbind', strsplit(as.character(pairDrugData$drug),',',fixed=TRUE))))
pairDrugData <- pairDrugData[!as.character(pairDrugData$X1) %in% cholDrugs & !as.character(pairDrugData$X2) %in% cholDrugs,]  #Filter
# Number of unique non-cholesterol drug pairs
nrow(pairDrugData)
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
optimalProbThreshold <- 0.009
glmPredictions[glmPredictions >= optimalProbThreshold]
sort(glmPredictions[glmPredictions >= optimalProbThreshold])
sort(glmPredictions[glmPredictions >= optimalProbThreshold], decreasing=F)
sort(glmPredictions[glmPredictions >= optimalProbThreshold], decreasing=T)
glmPredictions <- sort(glmPredictions[glmPredictions >= optimalProbThreshold], decreasing=T)
indices <- as.integer(names(glmPredictions))
test<-pairDrugData[which(pairDrugData$ID %in% indices),]
nrows(test)
nrow(test)
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
length(glmPredictions)
optimalProbThreshold <- 0.009
glmPredictions[glmPredictions >= optimalProbThreshold]
length(glmPredictions)
View(pairDrugData)
pairDrugData$row.names <- NULL
View(pairDrugData)
pairDrugData$ID <- NULL
View(pairDrugData)
pairDrugData$X1 <- NULL
pairDrugData$X2 <- NULL
pairDrugData$row.names
View(pairDrugData)
View(testData)
row.names(pairDrugData) <- NULL
View(pairDrugData)
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
optimalProbThreshold <- 0.009
length(glmPredictions)
glmPredictions[glmPredictions >= optimalProbThreshold]
length(glmPredictions)
glmPredictions <- glmPredictions[glmPredictions >= optimalProbThreshold]
length(glmPredictions)
pairDrugAeFreqs <- read.csv("./pair_drug_event_frequencies.csv", header=T, as.is=TRUE)
names(pairDrugAeFreqs) <- c("drug","drug1","drug2","event","freq")
Y <- data.frame(drug=unique(pairDrugAeFreqs$drug)) # Dataframe column of all possible drugs
pairDrugData <- sampleFeatureFormat(pairDrugAeFreqs, top5AEsByFisher, Y, c())
# Number of unique drug pairs in the dataset
nrow(pairDrugData)
# Filter out all non-cholesterol drugs
pairDrugData <- cbind(ID=rownames(pairDrugData),pairDrugData) # Split drug pair into separate columns with name of each drug
pairDrugData <- cbind(pairDrugData, data.frame(do.call('rbind', strsplit(as.character(pairDrugData$drug),',',fixed=TRUE))))
pairDrugData <- pairDrugData[!as.character(pairDrugData$X1) %in% cholDrugs & !as.character(pairDrugData$X2) %in% cholDrugs,]  #Filter
# Number of unique non-cholesterol drug pairs
nrow(pairDrugData)
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
# At or above this threshold, classify drug pair as matching side effect profile for cholesterol drugs
optimalProbThreshold <- 0.009
glmPredictions <- glmPredictions[glmPredictions >= optimalProbThreshold]
# Sanity check - should be ~1700
length(glmPredictions)
glmPredictions <- sort(glmPredictions[glmPredictions >= optimalProbThreshold], decreasing=T)
indices <- as.integer(names(glmPredictions))
test<-pairDrugData[which(pairDrugData$ID %in% indices),]
nrow(test)
View(test)
drugPairMatches <- pairDrugData[which(pairDrugData$ID %in% indices),]
drugPairMatches$drug
View(drugPairMatches)
drugPairMatches <- pairDrugData[which(pairDrugData$ID %in% indices),]
drugPairMatches <- pairDrugData$drug[which(pairDrugData$ID %in% indices)]
drugPairMatches <- data.frame(pairDrugData$drug[which(pairDrugData$ID %in% indices)])
View(drugPairMatches)
write.table(drugPairMatches, file="ps2_problem3.tsv", sep="\t")
drugPairMatches <- pairDrugData[which(pairDrugData$ID %in% indices),]
View(drugPairMatches)
indices <- as.integer(names(glmPredictions))
indices
indices <- as.integer(names(glmPredictions))
indices
indices[1]
View(pairDrugData)
pairDrugData$drug[3763]
indices
pairDrugData[pairDrugData$ID==3763]
pairDrugData[pairDrugData$ID==3763,]
pairDrugData[pairDrugData$ID==3763,]$drug
pairDrugData$drug[3763,]
pairDrugData$drug[3763]
pairDrugData$ID <- NULL
pairDrugData$X1 <- NULL
pairDrugData$X2 <- NULL
row.names(pairDrugData) <- NULL
View(pairDrugData)
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
# At or above this threshold, classify drug pair as matching side effect profile for cholesterol drugs
optimalProbThreshold <- 0.009
# Restrict list to those whose score is greater than the threshold
glmPredictions <- glmPredictions[glmPredictions >= optimalProbThreshold]
# Sanity check - should be ~1700
length(glmPredictions)
# Rank pairs by profile score
glmPredictions <- sort(glmPredictions[glmPredictions >= optimalProbThreshold], decreasing=T)
glmPredictions
names(glmPredictions)
as.integer(names(glmPredictions))
indices <- as.integer(names(glmPredictions))
names(pairDrugData)
drugPairMatches <- pairDrugData[indices,]
drugPairMatches
View(drugPairMatches)
length(drugPairMatches)
nrow(drugPairMatches)
drugPairMatches <- data.frame(pairDrugData[indices,]$drug, glmPredictions)
View(drugPairMatches)
pairDrugData[pairDrugData$ID==3763,]$drug
indices
indices[1]
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
# At or above this threshold, classify drug pair as matching side effect profile for cholesterol drugs
optimalProbThreshold <- 0.009
# Restrict list to those whose score is greater than the threshold
glmPredictions <- glmPredictions[glmPredictions >= optimalProbThreshold]
# Sanity check - should be ~1700
length(glmPredictions)
# Rank pairs by profile score
glmPredictions <- sort(glmPredictions[glmPredictions >= optimalProbThreshold], decreasing=T)
as.integer(names(glmPredictions))
pairDrugData[3655,]$drug
drugPairMatches <- data.frame(pairDrugData[indices,]$drug, glmPredictions)
View(drugPairMatches)
rownames(drugPairMatches) <- NULL
View(drugPairMatches)
drugPairMatches(names) <- c("drug", "profile.score")
names(drugPairMatches) <- c("drug", "profile.score")
View(drugPairMatches)
write.table(drugPairMatches, file="ps2_problem3.tsv", sep="\t")
write.table(drugPairMatches$drug, file="ps2_problem3.tsv", sep="\t")
write.table(drugPairMatches$drug, file="ps2_problem3.tsv", sep="\t")
knownInteractions <- read.csv("./va_drug_drug_interactions.csv", header=T, as.is=TRUE)
View(knownInteractions)
drugPairMatches <- cbind(ID=rownames(drugPairMatches),drugPairMatches) # Split drug pair into separate columns with name of each drug
View(drugPairMatches)
drugPairMatches <- cbind(drugPairMatches, data.frame(do.call('rbind', strsplit(as.character(drugPairMatches$drug),',',fixed=TRUE))))
View(drugPairMatches)
drugPairMatches.knownInteractions <- drugPairMatches$drug[as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2,]  #Filter
drugPairMatches.knownInteractions <- drugPairMatches[as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2,]  #Filter
View(drugPairMatches.knownInteractions)
drugPairMatches.knownInteractions <- drugPairMatches[(as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|as.character(drugPairMatches$X1) %in% (knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1),]  #Filter
drugPairMatches.knownInteractions <- drugPairMatches[(as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1),]  #Filter
View(drugPairMatches.knownInteractions)
drugPairMatches.knownInteractions <- drugPairMatches$drug[(as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)]  #Filter
drugPairMatches.knownInteractions
length(drugPairMatches.knownInteractions)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[(as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)])
test<- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[test])
View(drugPairMatches.knownInteractions)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[(as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)])
View(drugPairMatches.knownInteractions)
condition <- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[condition], knownInteractions$type[condition])
condition <- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[condition])
View(drugPairMatches.knownInteractions)
knownInteractions$type[condition]
knownInteractions$drug[condition]
knownInteractions$drug1[condition]
drugPairMatches$drug[condition]
drugPairMatches$X1[condition]
condition <- (as.character(drugPairMatches$X1) == knownInteractions$drug1 && as.character(drugPairMatches$X2) == knownInteractions$drug2)||(as.character(drugPairMatches$X1) == knownInteractions$drug2 && as.character(drugPairMatches$X2) == knownInteractions$drug1)
condition <- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[condition])
View(drugPairMatches.knownInteractions)
condition <- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[condition])
condition <- (knownInteractions$drug1 %in% as.character(drugPairMatches$X1) & knownInteractions$drug2 %in% as.character(drugPairMatches$X2))|(knownInteractions$drug2 %in% as.character(drugPairMatches$X1) & knownInteractions$drug1 %in% as.character(drugPairMatches$X2))
knownInteractions$type[condition]
condition <- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[condition])
drugPairMatches.knownInteractions
knownInteractions$drug1[1]
drugPairMatches$X1[1]
knownInteractions$type[condition]
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[condition])
drugPairMatches.knownInteractions
condition <- (knownInteractions$drug1 %in% as.character(drugPairMatches$X1) & knownInteractions$drug2 %in% as.character(drugPairMatches$X2))|(knownInteractions$drug2 %in% as.character(drugPairMatches$X1) & knownInteractions$drug1 %in% as.character(drugPairMatches$X2))
knownInteractions$type[condition]
drugPairMatches.knownInteractions <- drugPairMatches[condition,]
View(drugPairMatches.knownInteractions)
condition <- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- data.frame(drugPairMatches$drug[condition])
condition <- (knownInteractions$drug1 %in% as.character(drugPairMatches$X1) & knownInteractions$drug2 %in% as.character(drugPairMatches$X2))|(knownInteractions$drug2 %in% as.character(drugPairMatches$X1) & knownInteractions$drug1 %in% as.character(drugPairMatches$X2))
test<-knownInteractions$drug[condition]
View(drugPairMatches.knownInteractions)
test<-data.frame(knownInteractions$drug[condition])
condition <- (knownInteractions$drug1 %in% as.character(drugPairMatches$X1) & knownInteractions$drug2 %in% as.character(drugPairMatches$X2))|(knownInteractions$drug2 %in% as.character(drugPairMatches$X1) & knownInteractions$drug1 %in% as.character(drugPairMatches$X2))
test<-knownInteractions[condition,]
View(test)
View(drugPairMatches)
condition <- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- drugPairMatches[condition,]
View(drugPairMatches.knownInteractions)
within(knownInteractions, drug <- paste(drug1,drug1,sep=','))
View(knownInteractions)
knownInteractions$drug <- within(knownInteractions, drug <- paste(drug1,drug1,sep=','))
View(knownInteractions)
knownInteractions <- cbind(knownInteractions, within(knownInteractions, drug <- paste(drug1,drug1,sep=',')))
knownInteractions <- read.csv("./va_drug_drug_interactions.csv", header=T, as.is=TRUE)
knownInteractions <- cbind(knownInteractions, within(knownInteractions, drug <- paste(drug1,drug1,sep=',')))
View(knownInteractions)
knownInteractions <- read.csv("./va_drug_drug_interactions.csv", header=T, as.is=TRUE)
knownInteractions <- within(knownInteractions, drug <- paste(drug1,drug1,sep=',')))
knownInteractions <- within(knownInteractions, drug <- paste(drug1,drug1,sep=','))
View(knownInteractions)
knownInteractions <- within(knownInteractions, drugReversed <- paste(drug1,drug1,sep=','))
View(knownInteractions)
drugPairMatches <- data.frame(pairDrugData[indices,]$drug, glmPredictions)
rownames(drugPairMatches) <- NULL
names(drugPairMatches) <- c("drug", "score")
results <- knownInteractions[as.character(drugPairMatches$drug) == knownInteractions$drug1,]
results <- knownInteractions[as.character(drugPairMatches$drug) %in% knownInteractions$drug1,]
results <- knownInteractions[as.character(drugPairMatches$drug) %in% knownInteractions$drug1 | as.character(drugPairMatches$drug) %in% knownInteractions$drug2,]
drugPairMatches <- data.frame(pairDrugData[indices,]$drug, glmPredictions)
rownames(drugPairMatches) <- NULL
names(drugPairMatches) <- c("drug", "score")
drugPairMatches
View(drugPairMatches.knownInteractions)
knownInteractions <- read.csv("./va_drug_drug_interactions.csv", header=T, as.is=TRUE)
knownInteractions <- within(knownInteractions, drug <- paste(drug1,drug2,sep=','))
knownInteractions <- within(knownInteractions, drugReversed <- paste(drug2,drug1,sep=','))
results <- knownInteractions[as.character(drugPairMatches$drug) %in% knownInteractions$drug1 | as.character(drugPairMatches$drug) %in% knownInteractions$drug2,]
View(knownInteractions)
results <- knownInteractions[as.character(drugPairMatches$drug) %in% knownInteractions$drug | as.character(drugPairMatches$drug) %in% knownInteractions$drugReverse,]
results <- knownInteractions[as.character(drugPairMatches$drug) %in% knownInteractions$drug | as.character(drugPairMatches$drug) %in% knownInteractions$drugReversed,]
View(results)
View(drugPairMatches)
drugPairMatches$drug[1]
as.character(drugPairMatches$drug[1])
knownInteractions$drug[1]
results <- knownInteractions[as.character(drugPairMatches$drug) %in% knownInteractions$drug | as.character(drugPairMatches$drug) %in% knownInteractions$drugReversed,]
View(results)
results2<-drugPairMatches[as.character(drugPairMatches$drug) %in% knownInteractions$drug | as.character(drugPairMatches$drug) %in% knownInteractions$drugReversed,]
View(results2)
which(knownInteractions$drug == "RISPERIDONE,TOPIRAMATE")
which(drugPairMatches$drug == "MOXIFLOXACIN,THIORIDAZINE")
which(as.character(drugPairMatches$drug) == "MOXIFLOXACIN,THIORIDAZINE")
which(as.character(drugPairMatches$drug) == "RISPERIDONE,TOPIRAMATE")
results <- drugPairMatches[as.character(drugPairMatches$drug) %in% knownInteractions$drug | as.character(drugPairMatches$drug) %in% knownInteractions$drugReversed,]
View(results)
drugPairMatches <- cbind(ID=rownames(drugPairMatches),drugPairMatches) # Split drug pair into separate columns with name of each drug
drugPairMatches <- cbind(drugPairMatches, data.frame(do.call('rbind', strsplit(as.character(drugPairMatches$drug),',',fixed=TRUE))))
condition <- (as.character(drugPairMatches$X1) %in% knownInteractions$drug1 & as.character(drugPairMatches$X2) %in% knownInteractions$drug2)|(as.character(drugPairMatches$X1) %in% knownInteractions$drug2 & as.character(drugPairMatches$X2) %in% knownInteractions$drug1)
drugPairMatches.knownInteractions <- drugPairMatches[condition,]
View(drugPairMatches.knownInteractions)
which(knownInteractions$drug1=="BACLOFEN")
knownInteractions[183,]
drugPairMatches <- data.frame(pairDrugData[indices,]$drug, glmPredictions)
rownames(drugPairMatches) <- NULL
names(drugPairMatches) <- c("drug", "score")
write.table(drugPairMatches$drug, file="ps2_problem3.tsv", sep="\t")
knownInteractions <- read.csv("./va_drug_drug_interactions.csv", header=T, as.is=TRUE)
knownInteractions <- within(knownInteractions, drug <- paste(drug1,drug2,sep=','))
knownInteractions <- within(knownInteractions, drugReversed <- paste(drug2,drug1,sep=','))
results <- drugPairMatches[as.character(drugPairMatches$drug) %in% knownInteractions$drug | as.character(drugPairMatches$drug) %in% knownInteractions$drugReversed,]
View(results)
which(knownInteractions$drug == results$drug)
which(knownInteractions$drug %in% results$drug)
results <- drugPairMatches[as.character(drugPairMatches$drug) %in% knownInteractions$drug,]
results <- drugPairMatches[as.character(drugPairMatches$drug) %in% knownInteractions$drug | as.character(drugPairMatches$drug) %in% knownInteractions$drugReversed,]
which(knownInteractions$drug %in% results$drug)
which(knownInteractions$drugReversed %in% results$drug)
list <- (which(knownInteractions$drug %in% results$drug), which(knownInteractions$drugReversed %in% results$drug))
list <- c(which(knownInteractions$drug %in% results$drug), which(knownInteractions$drugReversed %in% results$drug))
list
knownInteractions[list,]
find(knownInteractions$drug %in% results$drug)
which(knownInteractions$drug %in% results$drug)
indices <- c(which(knownInteractions$drug %in% results$drug), which(knownInteractions$drugReversed %in% results$drug))
match <- knownInteractions[indices,]
View(match)
knownInteractions <- read.csv("./va_drug_drug_interactions.csv", header=T, as.is=TRUE)
# Merge two drugs into single comma-delimited string for easy comparison
knownInteractions <- within(knownInteractions, drug <- paste(drug1,drug2,sep=','))
# List of drugs we predicted as interacting to cause cholesterol-drug-like side effects, and which
# also appear in the VA's list of known drug interactions
results <- drugPairMatches[as.character(drugPairMatches$drug) %in% knownInteractions$drug,]
indices <- c(which(knownInteractions$drug %in% results$drug))
match <- knownInteractions[indices,]
View(match)
match <- knownInteractions[indices,drug+type]
match <- knownInteractions[indices,"drug"]
match
match <- knownInteractions[indices,c("drug","type")]
match
severities <- knownInteractions[indices,c("drug","type")]
matches <- drugPairMatches[as.character(drugPairMatches$drug) %in% knownInteractions$drug,]
results <- drugPairMatches[as.character(drugPairMatches$drug) %in% knownInteractions$drug,]
indices <- c(which(knownInteractions$drug %in% results$drug))
results <- knownInteractions[indices,c("drug","type")]
View(results)
View(results)
drugPairMatches <- data.frame(pairDrugData[indices,]$drug, glmPredictions)
rownames(drugPairMatches) <- NULL
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
# Restrict list to those whose score is greater than the threshold and rank pairs by profile score
glmPredictions <- glmPredictions[glmPredictions >= optimalProbThreshold]
glmPredictions <- sort(glmPredictions[glmPredictions >= optimalProbThreshold], decreasing=T)
length(glmPredictions)  # Sanity check - should be ~1700
# Submit list of drug-pairs as tab-delimited file called "ps2_problem3.tsv"
drugPairMatches <- data.frame(pairDrugData[indices,]$drug, glmPredictions)
View(pairDrugData)
drugPairMatches <- data.frame(pairDrugData[names(glmPredictions),]$drug, glmPredictions)
rownames(drugPairMatches) <- NULL
names(drugPairMatches) <- c("drug", "score")
write.table(drugPairMatches, file="ps2_problem3.tsv", sep="\t")
View(pairDrugData)
drugPairInteractions <- data.frame(pairDrugData[names(glmPredictions),]$drug, glmPredictions)
rownames(drugPairInteractions) <- NULL
names(drugPairInteractions) <- c("drug", "score")
write.table(drugPairInteractions$drug, file="ps2_problem3.tsv", sep="\t")
knownInteractions <- read.csv("./va_drug_drug_interactions.csv", header=T, as.is=TRUE)
# Merge two drugs into single comma-delimited string for easy comparison
knownInteractions <- within(knownInteractions, drug <- paste(drug1,drug2,sep=','))
# Find drug pairs we predicted as interacting to cause cholesterol-drug-like side effects,
# which also appear in the VA's list of known drug interactions
results <- drugPairInteractions[as.character(drugPairInteractions$drug) %in% knownInteractions$drug,]
indices <- c(which(knownInteractions$drug %in% results$drug))
# List of drug pairs and their severities
results <- knownInteractions[indices,c("drug","type")]
View(drugPairInteractions)
drugPairInteractions$drug[1:10]
pairDrugData[pairDrugData$drug %in% drugPairInteractions$drug[1:10],]
test<-pairDrugData[pairDrugData$drug %in% drugPairInteractions$drug[1:10],]
View(test)
eventFreqsForTopHits<-pairDrugData[pairDrugData$drug %in% drugPairInteractions$drug[1:20],]
View(eventFreqsForTopHits)
pairDrugData$frequency[1:20]
names(pairDrugData)
names(drugPairInteractions)
drugPairInteractions$score[1:20]
write.table(drugPairInteractions, file="ps2_problem3.tsv", sep="\t")
source('~/BMI215/HW2/drugSideEffectAssociations.R')
glmPredictions <- predict(glmModel, newdata = pairDrugData, type="response")
glmPredictions
glmModel
drugPairInteractions$score[1:20]
eventFreqsForTopHits
